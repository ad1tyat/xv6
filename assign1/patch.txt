From 6b1014e94a0312e470fb5a9ac07229e582429753 Mon Sep 17 00:00:00 2001
From: ad1tyat <adityatrivedi25@gmail.com>
Date: Thu, 19 Aug 2021 22:28:38 +0530
Subject: [PATCH] Assignment 1

---
 .gitignore |  1 +
 Makefile   |  7 ++++---
 drawtest.c | 15 +++++++++++++++
 syscall.c  |  2 ++
 syscall.h  |  1 +
 sysdraw.c  | 55 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 user.h     |  1 +
 usys.S     |  1 +
 8 files changed, 80 insertions(+), 3 deletions(-)
 create mode 100644 drawtest.c
 create mode 100644 sysdraw.c

diff --git a/.gitignore b/.gitignore
index 3e2c9de..6c0a8a4 100644
--- a/.gitignore
+++ b/.gitignore
@@ -14,3 +14,4 @@ kernel
 kernelmemfs
 mkfs
 .gdbinit
+.vscode
diff --git a/Makefile b/Makefile
index 09d790c..d9f2f71 100644
--- a/Makefile
+++ b/Makefile
@@ -27,6 +27,7 @@ OBJS = \
 	uart.o\
 	vectors.o\
 	vm.o\
+	sysdraw.o\
 
 # Cross-compiling (e.g., on Mac OS X)
 # TOOLPREFIX = i386-jos-elf
@@ -49,10 +50,9 @@ TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/d
 	echo "*** To turn off this error, run 'gmake TOOLPREFIX= ...'." 1>&2; \
 	echo "***" 1>&2; exit 1; fi)
 endif
-
 # If the makefile can't find QEMU, specify its path here
-# QEMU = qemu-system-i386
-
+QEMU = qemu-system-i386
+# QEMU = qemu-system-x86_64
 # Try to infer the correct QEMU
 ifndef QEMU
 QEMU = $(shell if which qemu > /dev/null; \
@@ -181,6 +181,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_drawtest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/drawtest.c b/drawtest.c
new file mode 100644
index 0000000..3704e8e
--- /dev/null
+++ b/drawtest.c
@@ -0,0 +1,15 @@
+#include "types.h"
+#include "user.h"
+
+char myBuffer[1024];
+
+
+int main(void){
+    int n = draw(myBuffer, 1024);
+    if(n<0){
+        printf(1,"Image Error in drawtest.c\n");
+    }else if(write(1, myBuffer, n) != n){
+        printf(1,"Write Error in drawtest.c\n");
+    }
+    exit();
+}
diff --git a/syscall.c b/syscall.c
index ee85261..1cc175d 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,7 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_draw(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +127,7 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_draw]  sys_draw,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..03823f0 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_draw  22
diff --git a/sysdraw.c b/sysdraw.c
new file mode 100644
index 0000000..7d2c0a1
--- /dev/null
+++ b/sysdraw.c
@@ -0,0 +1,55 @@
+#include "types.h"
+#include "defs.h"
+
+const char art[] = "___________________________$$\n\
+_________________________$$$$\n\
+_______________________$$$$$$\n\
+______________________$$$$$$\n\
+______________________$$$$\n\
+______________________$$\n\
+_________$$$$$$$$$$$$$_$$$$$$$$$$$$$\n\
+______$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\
+____$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\
+___$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\
+__$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\
+_$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\
+_$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\
+_$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\
+_$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\
+__$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\
+___$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\
+____$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\
+_____$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\
+______$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\
+________$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\
+__________$$$$$$$$$$$$$$$$$$$$$$$$$\n\
+____________$$$$$$$$$$$$$$$$$$$$$\n\
+______________$$$$$$$$__$$$$$$$\n";
+
+
+int sys_draw(void){
+    int buffer_size;
+    char *buffer;
+    
+    int sz = sizeof(art);
+
+    // Checking whether the buffer is valid
+    int invalidBuffer = argint(1, &buffer_size) < 0;
+    
+    // Checking whether the buffer size is sufficient to copy image
+    int insufficientSize = buffer_size < sz;
+    
+    // Checking whether the pointer provided is correct 
+    int bufError = argptr(0, &buffer, buffer_size) < 0;
+
+    // If any error, return -1
+    if(invalidBuffer || insufficientSize || bufError){
+        return -1;
+    }
+
+    // copying ASCII ART
+    memmove(buffer, art, (uint)sz);
+    
+    // returning size
+    return sz;
+}
\ No newline at end of file
diff --git a/user.h b/user.h
index 4f99c52..0d51d01 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int draw(void*, uint);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..d9be91e 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,4 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(draw)
-- 
2.25.1

